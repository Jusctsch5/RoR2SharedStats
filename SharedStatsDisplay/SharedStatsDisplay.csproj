<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
	<LangVersion>8.0</LangVersion>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <NoWarn>1701;1702;0618</NoWarn>
  </PropertyGroup>

  <ItemGroup>
    <Folder Include="NetworkWeaver\" />
    <Folder Include="libs\" />
  </ItemGroup>

  <ItemGroup>
    <Reference Include="0Harmony">
      <HintPath>libs\0Harmony.dll</HintPath>
    </Reference>
    <Reference Include="Assembly-CSharp">
      <HintPath>libs\Assembly-CSharp.dll</HintPath>
    </Reference>
    <Reference Include="Assembly-CSharp.R2API.mm">
      <HintPath>libs\Assembly-CSharp.R2API.mm.dll</HintPath>
    </Reference>
    <Reference Include="BepInEx">
      <HintPath>libs\BepInEx.dll</HintPath>
    </Reference>
    <Reference Include="BepInEx.Harmony">
      <HintPath>libs\BepInEx.Harmony.dll</HintPath>
    </Reference>
    <Reference Include="BepInEx.MonoMod.Loader">
      <HintPath>libs\BepInEx.MonoMod.Loader.dll</HintPath>
    </Reference>
    <Reference Include="BepInEx.Preloader">
      <HintPath>libs\BepInEx.Preloader.dll</HintPath>
    </Reference>
    <Reference Include="MMHOOK_Assembly-CSharp">
      <HintPath>libs\MMHOOK_Assembly-CSharp.dll</HintPath>
    </Reference>
    <Reference Include="Mono.Cecil">
      <HintPath>libs\Mono.Cecil.dll</HintPath>
    </Reference>
    <Reference Include="Mono.Cecil.Mdb">
      <HintPath>libs\Mono.Cecil.Mdb.dll</HintPath>
    </Reference>
    <Reference Include="Mono.Cecil.Pdb">
      <HintPath>libs\Mono.Cecil.Pdb.dll</HintPath>
    </Reference>
    <Reference Include="Mono.Cecil.Rocks">
      <HintPath>libs\Mono.Cecil.Rocks.dll</HintPath>
    </Reference>
    <Reference Include="MonoMod">
      <HintPath>libs\MonoMod.exe</HintPath>
    </Reference>
    <Reference Include="MonoMod.RuntimeDetour">
      <HintPath>libs\MonoMod.RuntimeDetour.dll</HintPath>
    </Reference>
    <Reference Include="MonoMod.Utils">
      <HintPath>libs\MonoMod.Utils.dll</HintPath>
    </Reference>
    <Reference Include="Newtonsoft.Json">
      <HintPath>libs\Newtonsoft.Json.dll</HintPath>
    </Reference>
    <Reference Include="R2API">
      <HintPath>libs\R2API.dll</HintPath>
    </Reference>
    <Reference Include="Rewired_Core">
      <HintPath>libs\Rewired_Core.dll</HintPath>
    </Reference>
    <Reference Include="Unity.TextMeshPro">
      <HintPath>libs\Unity.TextMeshPro.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine">
      <HintPath>libs\UnityEngine.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.CoreModule">
      <HintPath>libs\UnityEngine.CoreModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.Networking">
      <HintPath>libs\UnityEngine.Networking.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.TextRenderingModule">
      <HintPath>libs\UnityEngine.TextRenderingModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.UI">
      <HintPath>libs\UnityEngine.UI.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.UIModule">
      <HintPath>libs\UnityEngine.UIModule.dll</HintPath>
    </Reference>
  </ItemGroup>

  <Target Name="PostBuild" AfterTargets="PostBuildEvent">
    <Exec Command="REM First we copy the from the output folder to the NetworkWeaver folder.&#xD;&#xA;REM We store the output from robocopy in a file called robocopy which we'll delete at the end of the file.&#xD;&#xA;robocopy $(TargetDir) $(ProjectDir)\NetworkWeaver $(TargetFileName) &gt; $(TargetDir)Robocopy&#xD;&#xA;REM Then we navigate our script to the NetworkWeaver folder to make the follow up line less verbose.&#xD;&#xA;cd $(ProjectDir)\NetworkWeaver&#xD;&#xA;REM Unity.UNetWeaver.exe {path to Coremodule} {Path to Networking} {Path to output folder} {Path to the dll you want patched} {Path to all needed references for the to-be-patched dll}&#xD;&#xA;&#xD;&#xA;echo &quot;Patched/&quot;  &#xD;&#xA;echo $(TargetFileName) &#xD;&#xA;echo &quot;$(ProjectDir)\libs&quot;&#xD;&#xA;&#xD;&#xA;Unity.UNetWeaver.exe &quot;..\libs\UnityEngine.CoreModule.dll&quot; &quot;..\libs\UnityEngine.Networking.dll&quot; &quot;Patched/&quot;  $(TargetFileName) &quot;$(ProjectDir)\libs&quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;REM We store the prepatched dll disabled as a .prepatch so that you can check it if you want, but first we need to make sure that file doesn't exist already.&#xD;&#xA;IF EXIST $(TargetFileName).prepatch (&#xD;&#xA;DEL /F $(TargetFileName).prepatch&#xD;&#xA;)&#xD;&#xA;REM Then we rename the prepatched file to bla.dll.prepatch&#xD;&#xA;ren $(TargetFileName) $(TargetFileName).prepatch&#xD;&#xA;REM move our script to the Patched Folder&#xD;&#xA;cd Patched&#xD;&#xA;REM move from the current directory (.) to the projectDirectory and store the output once more to the Robocopy file.&#xD;&#xA;robocopy . $(ProjectDir)  $(TargetFileName) &gt; $(TargetDir)Robocopy&#xD;&#xA;REM Remove the patched file from the Patched folder, because the Weaver won't run if the file already exists.&#xD;&#xA;del  $(TargetFileName)&#xD;&#xA;REM Delete the holder for all robocopy output.&#xD;&#xA;del $(TargetDir)Robocopy&#xD;&#xA;&#xD;&#xA;echo &quot;Moving dll to game and server&quot;  &#xD;&#xA;REM copy /Y &quot;$(ProjectPath)\..\bin\Debug\netstandard2.0\SharedStatsDisplay.dll&quot; &quot;E:\Apps\steam\steamapps\common\Risk of Rain 2\BepInEx\plugins&quot;&#xD;&#xA;REM copy /Y &quot;$(ProjectPath)\..\bin\Debug\netstandard2.0\SharedStatsDisplay.dll&quot; &quot;E:\Apps\steam\steamapps\common\Risk of Rain 2 Dedicated Server\BepInEx\plugins&quot;" />
  </Target>

</Project>
